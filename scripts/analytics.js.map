{"version":3,"names":[],"mappings":"","sources":["scripts/analytics.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n/* eslint-env browser, serviceworker */\n\n// Make use of Google Analytics Measurement Protocol.\n// https://developers.google.com/analytics/devguides/collection/protocol/v1/reference\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Analytics = function () {\n  function Analytics() {\n    _classCallCheck(this, Analytics);\n  }\n\n  _createClass(Analytics, [{\n    key: 'trackEvent',\n    value: function trackEvent(eventAction, eventValue) {\n      var _this = this;\n\n      if (!this.trackingId) {\n        console.error('You need to set a trackingId, for example:');\n        console.error('self.analytics.trackingId = \\'UA-XXXXXXXX-X\\';');\n\n        // We want this to be a safe method, so avoid throwing Unless\n        // It's absolutely necessary.\n        return Promise.resolve();\n      }\n\n      if (!eventAction && !eventValue) {\n        console.warn('sendAnalyticsEvent() called with no eventAction or ' + 'eventValue.');\n        return Promise.resolve();\n      }\n\n      return self.registration.pushManager.getSubscription().then(function (subscription) {\n        if (subscription === null) {\n          // The user has not subscribed yet.\n          throw new Error('No subscription currently available.');\n        }\n\n        var payloadData = {\n          // Version Number\n          v: 1,\n          // Client ID\n          cid: subscription.endpoint,\n          // Tracking ID\n          tid: _this.trackingId,\n          // Hit Type\n          t: 'event',\n          // Data Source\n          ds: 'serviceworker',\n          // Event Category\n          ec: 'serviceworker',\n          // Event Action\n          ea: eventAction,\n          // Event Value\n          ev: eventValue\n        };\n\n        var payloadString = Object.keys(payloadData).filter(function (analyticsKey) {\n          return payloadData[analyticsKey];\n        }).map(function (analyticsKey) {\n          return analyticsKey + '=' + encodeURIComponent(payloadData[analyticsKey]);\n        }).join('&');\n\n        return fetch('https://www.google-analytics.com/collect', {\n          method: 'post',\n          body: payloadString\n        });\n      }).then(function (response) {\n        if (!response.ok) {\n          return response.text().then(function (responseText) {\n            throw new Error('Bad response from Google Analytics ' + ('[' + response.status + '] ' + responseText));\n          });\n        }\n      }).catch(function (err) {\n        console.warn('Unable to send the analytics event', err);\n      });\n    }\n  }]);\n\n  return Analytics;\n}();\n\nif (typeof self !== 'undefined') {\n  self.analytics = new Analytics();\n}\n\n},{}]},{},[1]);\n"],"file":"scripts/analytics.js","sourceRoot":"/source/"}